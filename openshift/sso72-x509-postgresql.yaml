apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: sso72-x509-postgresql-persistent
  xpaas: 1.4.14
message: A new persistent RH-SSO service (using PostgreSQL) has been created in your
  project. The admin username/password for accessing the master realm via the RH-SSO
  console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for
  accessing the PostgreSQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}.
  The HTTPS keystore used for serving secure content, the JGroups keystore used for
  securing JGroups communications, and server truststore used for securing RH-SSO
  requests were automatically created via OpenShift's service serving x509 certificate
  secrets.
metadata:
  annotations:
    description: An example RH-SSO 7 application with a PostgreSQL database. For more
      information about using this template, see https://github.com/jboss-openshift/application-templates.
    iconClass: icon-sso
    openshift.io/display-name: Red Hat Single Sign-On 7.2 + PostgreSQL (Persistent)
    openshift.io/provider-display-name: Red Hat, Inc.
    tags: sso,keycloak,jboss
    template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
    template.openshift.io/long-description: This template defines resources needed
      to develop Red Hat Single Sign-On 7.2 server based deployment, deployment configuration
      for PostgreSQL using persistence, and securing RH-SSO communication using re-encrypt
      TLS.
    template.openshift.io/support-url: https://access.redhat.com
    version: 1.4.14
  creationTimestamp: 2018-09-24T23:43:24Z
  name: sso72-x509-postgresql-persistent
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The database server's port.
    name: ${NAME}-postgresql${SUFFIX}
  spec:
    ports:
    - port: 5432
      targetPort: 5432
    selector:
      deploymentConfig: ${NAME}-postgresql${SUFFIX}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${NAME}-postgresql${SUFFIX}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${NAME}-postgresql${SUFFIX}
  spec:
    replicas: 1
    selector:
      deploymentConfig: ${NAME}-postgresql${SUFFIX}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          deploymentConfig: ${NAME}-postgresql${SUFFIX}
        name: ${NAME}-postgresql${SUFFIX}
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                  name: "${NAME}-postgresql${SUFFIX}"
                  key: "username"
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                  name: "${NAME}-postgresql${SUFFIX}"
                  key: "password"
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                  name: "${NAME}-postgresql${SUFFIX}"
                  key: "database"
          - name: POSTGRESQL_MAX_CONNECTIONS
            value: ${POSTGRESQL_MAX_CONNECTIONS}
          - name: POSTGRESQL_MAX_PREPARED_TRANSACTIONS
            value: ${POSTGRESQL_MAX_CONNECTIONS}
          - name: POSTGRESQL_SHARED_BUFFERS
            value: ${POSTGRESQL_SHARED_BUFFERS}
          image: postgresql
          imagePullPolicy: Always
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 1
            limits:
              memory: ${MEMORY_LIMIT}
              cpu: 2
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: postgresql-pvol
        terminationGracePeriodSeconds: 60
        volumes:
        - name: postgresql-pvol
          persistentVolumeClaim:
            claimName: ${NAME}-postgresql${SUFFIX}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: ImageChange
    - type: ConfigChange
parameters:
- description: The name for the application.
  displayName: Application Name
  name: NAME
  required: true
  value: sso
- description: A suffix appended to most objects
  displayName: Application Suffix
  name: SUFFIX
  required: true
  value: -dev
- description: The maximum number of client connections allowed. This also sets the
    maximum number of prepared transactions.
  displayName: PostgreSQL Maximum number of connections
  name: POSTGRESQL_MAX_CONNECTIONS
- description: Configures how much memory is dedicated to PostgreSQL for caching data.
  displayName: PostgreSQL Shared Buffers
  name: POSTGRESQL_SHARED_BUFFERS
- description: Size of persistent storage for database volume.
  displayName: Database Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: Namespace in which the ImageStreams for Red Hat Middleware images are
    installed. These ImageStreams are normally installed in the openshift namespace.
    You should only need to modify this if you've installed the ImageStreams in a
    different namespace/project.
  displayName: ImageStream Namespace
  name: IMAGE_STREAM_NAMESPACE
  required: true
  value: openshift
- description: The tag to use for the "postgresql" image stream.  Typically, this
    aligns with the major.minor version of PostgreSQL.
  displayName: PostgreSQL Image Stream Tag
  name: POSTGRESQL_IMAGE_STREAM_TAG
  required: true
  value: "9.5"
- description: Container memory limit.
  displayName: Container Memory Limit
  name: MEMORY_LIMIT
  value: 1Gi
