apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: sso72-x509-postgresql-persistent
  xpaas: 1.4.14
  app.kubernetes.io/version: "${VERSION}"
  app.kubernetes.io/name: "rh-sso"
  app.kubernetes.io/instance: "${NAME}${SUFFIX}"
  app.kubernetes.io/component: "server"
  app.kubernetes.io/part-of: "rh-sso"
  app.kubernetes.io/managed-by: template
  app.kubernetes.io/phase: "dev"
message: A new persistent RH-SSO service (using PostgreSQL) has been created in your
  project. The admin username/password for accessing the master realm via the RH-SSO
  console is ${SSO_ADMIN_USERNAME}/${SSO_ADMIN_PASSWORD}. The username/password for
  accessing the PostgreSQL database "${DB_DATABASE}" is ${DB_USERNAME}/${DB_PASSWORD}.
  The HTTPS keystore used for serving secure content, the JGroups keystore used for
  securing JGroups communications, and server truststore used for securing RH-SSO
  requests were automatically created via OpenShift's service serving x509 certificate
  secrets.
metadata:
  annotations:
    description: An example RH-SSO 7 application with a PostgreSQL database. For more
      information about using this template, see https://github.com/jboss-openshift/application-templates.
    iconClass: icon-sso
    openshift.io/display-name: Red Hat Single Sign-On 7.2 + PostgreSQL (Persistent)
    openshift.io/provider-display-name: Red Hat, Inc.
    tags: sso,keycloak,jboss
    template.openshift.io/documentation-url: https://access.redhat.com/documentation/en/red-hat-single-sign-on/
    template.openshift.io/long-description: This template defines resources needed
      to develop Red Hat Single Sign-On 7.2 server based deployment, deployment configuration
      for PostgreSQL using persistence, and securing RH-SSO communication using re-encrypt
      TLS.
    template.openshift.io/support-url: https://access.redhat.com
    version: 1.4.14
  creationTimestamp: 2018-09-24T23:43:24Z
  name: sso72-x509-postgresql-persistent
objects:
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: "${NAME}"
    labels:
      shared: true
    generation: 0
  spec:
    lookupPolicy:
      local: false
  status:
    dockerImageRepository: ''
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The web server's https port.
      service.alpha.openshift.io/serving-cert-secret-name: ${NAME}-x509-https-secret${SUFFIX}
    name: ${NAME}${SUFFIX}
  spec:
    ports:
    - port: 8443
      targetPort: 8443
    selector:
      deploymentConfig: ${NAME}${SUFFIX}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The JGroups ping port for clustering.
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
      service.alpha.openshift.io/serving-cert-secret-name: ${NAME}-x509-jgroups-secret${SUFFIX}
    name: ${NAME}-ping${SUFFIX}
  spec:
    clusterIP: None
    ports:
    - name: ping
      port: 8888
    selector:
      deploymentConfig: ${NAME}${SUFFIX}
- apiVersion: v1
  id: ${NAME}-https${SUFFIX}
  kind: Route
  metadata:
    annotations:
      description: Route for application's https service.
    name: ${NAME}${SUFFIX}
  spec:
    host: ${HOST}
    tls:
      termination: reencrypt
    to:
      name: ${NAME}${SUFFIX}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${NAME}${SUFFIX}
  spec:
    replicas: 3
    selector:
      deploymentConfig: ${NAME}${SUFFIX}
    strategy:
      activeDeadlineSeconds: 21600
# As of SSO 7.3, it doesn't support rolling deployment
#      resources: {}
#      rollingParams:
#        intervalSeconds: 1
#        maxSurge: 25%
#        maxUnavailable: 25%
#        timeoutSeconds: 600
#        updatePeriodSeconds: 1
      type: Recreate
    template:
      metadata:
        labels:
          deploymentConfig: ${NAME}${SUFFIX}
        name: ${NAME}${SUFFIX}
      spec:
        containers:
        - env:
          - name: DB_POSTGRESQL_SERVICE_HOST
            value: ${DB_SERVICE_HOST}
          - name: DB_POSTGRESQL_SERVICE_PORT
            value: "5432"
          - name: DB_SERVICE_PREFIX_MAPPING
            value: db-postgresql=DB
          - name: DB_JNDI
            value: ${DB_JNDI}
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                  name: "${DB_SECRET_NAME}"
                  key: "${DB_SECRET_USERNAME_KEY}"
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                  name: "${DB_SECRET_NAME}"
                  key: "${DB_SECRET_PASSWORD_KEY}"
          - name: DB_DATABASE
            valueFrom:
              secretKeyRef:
                  name: "${DB_SECRET_NAME}"
                  key: "${DB_SECRET_DATABASE_KEY}"
          - name: TX_DATABASE_PREFIX_MAPPING
            value: db-postgresql=DB
          - name: DB_TX_MIN_POOL_SIZE
            value: ${DB_MIN_POOL_SIZE}
          - name: DB_TX_MAX_POOL_SIZE
            value: ${DB_MAX_POOL_SIZE}
          - name: DB_TX_ISOLATION
            value: ${DB_TX_ISOLATION}
          - name: JGROUPS_PING_PROTOCOL
            value: openshift.DNS_PING
          - name: OPENSHIFT_DNS_PING_SERVICE_NAME
            value: ${NAME}-ping${SUFFIX}
          - name: OPENSHIFT_DNS_PING_SERVICE_PORT
            value: "8888"
          - name: X509_CA_BUNDLE
            value: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
          - name: JGROUPS_CLUSTER_PASSWORD
            valueFrom:
              secretKeyRef:
                  name: "${NAME}-jgroups${SUFFIX}"
                  key: "password"
          - name: SSO_ADMIN_USERNAME
            valueFrom:
              secretKeyRef:
                  name: "${NAME}-admin${SUFFIX}"
                  key: "username"
          - name: SSO_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                  name: "${NAME}-admin${SUFFIX}"
                  key: "password"
          - name: SSO_REALM
            value: ""
          - name: SSO_SERVICE_USERNAME
            value: ""
          - name: SSO_SERVICE_PASSWORD
            value: ""
          - name: JAVA_OPTS_APPEND
            value: "-Dkeycloak.profile.feature.authorization=enabled"
# Debug configuration for remote debugging
#          - name: DEBUG
#            value: 'true'
#          - name: DEBUG_PORT
#            value: '0.0.0.0:8787'
          image: " "
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - /opt/eap/bin/livenessProbe.sh
            initialDelaySeconds: 60
          name: "rh-sso"
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 8443
            name: https
            protocol: TCP
          - containerPort: 8888
            name: ping
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - /opt/eap/bin/readinessProbe.sh
          resources:
            requests:
              cpu: "500m"
            limits:
              memory: ${MEMORY_LIMIT}
              cpu: "1"
          volumeMounts:
          - mountPath: /etc/x509/https
            name: sso-x509-https-volume
            readOnly: true
          - mountPath: /etc/x509/jgroups
            name: sso-x509-jgroups-volume
            readOnly: true
        terminationGracePeriodSeconds: 75
        volumes:
        - name: sso-x509-https-volume
          secret:
            secretName: ${NAME}-x509-https-secret${SUFFIX}
        - name: sso-x509-jgroups-volume
          secret:
            secretName: ${NAME}-x509-jgroups-secret${SUFFIX}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - "rh-sso"
        from:
          kind: ImageStreamTag
          name: "${NAME}:${IMAGE_TAG}"
      type: ImageChange
    - type: ConfigChange
- apiVersion: policy/v1beta1
  kind: PodDisruptionBudget
  metadata:
    creationTimestamp: null
    name: ${NAME}${SUFFIX}
  spec:
    minAvailable: 2
    selector:
      matchLabels:
        deploymentconfig: ${NAME}${SUFFIX}
  status:
    currentHealthy: 0
    desiredHealthy: 0
    disruptedPods: null
    disruptionsAllowed: 0
    expectedPods: 0
parameters:
- description: The name for the application.
  displayName: Application Name
  name: NAME
  required: true
  value: sso
- description: A suffix appended to most objects
  displayName: Application Suffix
  name: SUFFIX
  value: ""
- name: VERSION
  value: "7.3"
- name: IMAGE_TAG
  value: "7.3-1"
- description: Database JNDI name used by application to resolve the datasource, e.g.
    java:/jboss/datasources/postgresql
  displayName: Database JNDI Name
  name: DB_JNDI
  value: java:jboss/datasources/KeycloakDS
- name: DB_SERVICE_HOST
- name: DB_SECRET_NAME
- name: DB_SECRET_DATABASE_KEY
- name: DB_SECRET_USERNAME_KEY
- name: DB_SECRET_PASSWORD_KEY
- description: Sets xa-pool/min-pool-size for the configured datasource.
  displayName: Datasource Minimum Pool Size
  name: DB_MIN_POOL_SIZE
  value: "5"
- description: Sets xa-pool/max-pool-size for the configured datasource.
  displayName: Datasource Maximum Pool Size
  name: DB_MAX_POOL_SIZE
  value: "20"
- description: Sets transaction-isolation for the configured datasource.
  displayName: Datasource Transaction Isolation
  name: DB_TX_ISOLATION
- description: Container memory limit.
  displayName: Container Memory Limit
  name: MEMORY_LIMIT
  value: 1Gi
- description: Set route with specific host.
  displayName: Host route
  name: HOST
  value: ''